# ================================
# DomMate - Docker Build Workflow
# ================================

name: Build and Push Docker Images

# Trigger conditions
on:
  # Build on push to main branch
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  
  # Build on pull requests to main
  pull_request:
    branches:
      - main
  
  # Allow manual workflow trigger
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: yeagoo/dommate

# Jobs
jobs:
  # Build and test
  build:
    runs-on: ubuntu-latest
    
    # Permissions for GHCR
    permissions:
      contents: read
      packages: write
    
    # Steps
    steps:
      # Checkout source code
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # Install dependencies (fix rollup native module issue)
      - name: Install dependencies
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install
      
      # Run tests (if available)
      - name: Run tests
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No tests found, skipping..."
          fi
      
      # Build frontend
      - name: Build frontend
        run: npm run build
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Log in to Container Registry
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Extract metadata
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.title=DomMate
            org.opencontainers.image.description=Professional Domain Expiration Monitoring Platform
            org.opencontainers.image.vendor=DomMate Team
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=https://github.com/yeagoo/DomMate
            org.opencontainers.image.documentation=https://github.com/yeagoo/DomMate/blob/main/README.md
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
      
      # Test Docker image
      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          # Pull the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run container for testing
          docker run -d --name dommate-test \
            -p 3001:3001 \
            -e NODE_ENV=production \
            -e PORT=3001 \
            -v dommate-test-data:/app/data \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Check container status
          echo "=== Container Status ==="
          docker ps -a
          
          # Show container logs
          echo "=== Container Logs ==="
          docker logs dommate-test
          
          # Wait for container to be ready
          echo "=== Waiting for service to start ==="
          for i in {1..12}; do
            if curl -f http://localhost:3001/api/auth/info 2>/dev/null; then
              echo "Service is ready!"
              break
            fi
            echo "Attempt $i/12: Service not ready yet, waiting 10s..."
            sleep 10
          done
          
          # Final test
          echo "=== Final Health Check ==="
          curl -f http://localhost:3001/api/auth/info || (
            echo "=== Final Container Logs ==="
            docker logs dommate-test
            exit 1
          )
          
          # Stop test container
          docker stop dommate-test
          docker rm dommate-test
      
      # Generate SBOM (Software Bill of Materials)
      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json
      
      # Upload SBOM artifact
      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
      
      # Security scan with Trivy
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      # Upload Trivy scan results
      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (optional)
  deploy-staging:
    # Only run on main branch pushes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # Add your staging deployment logic here
          # For example: trigger deployment webhook, update k8s manifests, etc.

  # Create release (on tags)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "DomMate ${{ github.ref_name }}" \
            --notes "## What's Changed

          Docker image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`

          ### Installation

          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          \`\`\`

          ### Docker Compose

          \`\`\`yaml
          services:
            dommate:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
              # ... other configuration
          \`\`\`

          See [README.md](README.md) for full installation instructions." \
            ${{ contains(github.ref_name, '-') && '--prerelease' || '' }} 