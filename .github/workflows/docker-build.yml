name: Build and Push Docker Images

on:
  # Trigger on push to main branch
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  
  # Trigger on pull request to main
  pull_request:
    branches:
      - main
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to Docker Registry'
        required: true
        default: 'true'
        type: boolean

# 添加权限配置以支持GHCR写入
permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/dommate

jobs:
  # Build and test the application
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies with retry
        run: |
          set -e
          echo "🔄 安装依赖..."
          npm install --legacy-peer-deps || {
            echo "首次安装失败，清理后重试..."
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
          }

      - name: Verify installation
        run: |
          echo "📊 Node.js 版本: $(node --version)"
          echo "📊 npm 版本: $(npm --version)"
          echo "📦 已安装包数量: $(ls node_modules | wc -l)"

      - name: Run linter
        run: npm run lint --if-present
        continue-on-error: true

      - name: Run tests
        run: npm test --if-present
        continue-on-error: true

      - name: Test frontend build
        run: |
          echo "🏗️ 测试前端构建..."
          npm run build || {
            echo "标准构建失败，尝试备选方案..."
            npm run build --skip-type-check || {
              echo "跳过类型检查构建失败，尝试rollup修复..."
              rm -rf node_modules/@rollup/ node_modules/rollup
              npm install @rollup/rollup-linux-x64-musl --optional --legacy-peer-deps
              npm run build
            }
          }
          
          echo "✅ 前端构建测试完成"
          ls -la dist/

  # Build and push Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD'}},enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=22

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Security scanning
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.sarif

  # Test deployment
  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Test container deployment
        run: |
          echo "🧪 测试容器部署..."
          
          # 拉取镜像
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 创建测试volume
          docker volume create dommate-test-data
          
          # 启动容器
          docker run -d \
            --name dommate-test \
            -p 3001:3001 \
            -v dommate-test-data:/app/data \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 等待启动
          echo "⏳ 等待应用启动..."
          sleep 30
          
          # 检查健康状态
          for i in {1..10}; do
            if curl -f http://localhost:3001/health; then
              echo "✅ 健康检查通过"
              break
            else
              echo "⏳ 等待应用就绪... ($i/10)"
              sleep 10
            fi
          done
          
          # 检查前端
          if curl -f http://localhost:3001/; then
            echo "✅ 前端页面可访问"
          else
            echo "❌ 前端页面不可访问"
            exit 1
          fi
          
          # 显示日志
          echo "📋 容器日志:"
          docker logs dommate-test
          
          # 清理
          docker stop dommate-test
          docker rm dommate-test
          docker volume rm dommate-test-data

  # Cleanup old versions
  cleanup:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    continue-on-error: true
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'dommate'
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: true

  # Create release
  release:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🎉 DomMate 部署成功！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 镜像信息" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像地址**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **支持架构**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js版本**: 22" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 快速部署" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d \\" >> $GITHUB_STEP_SUMMARY
          echo "  --name dommate \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 3001:3001 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v dommate-data:/app/data \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 访问地址" >> $GITHUB_STEP_SUMMARY
          echo "- **主页**: http://localhost:3001" >> $GITHUB_STEP_SUMMARY
          echo "- **英文版**: http://localhost:3001/en" >> $GITHUB_STEP_SUMMARY
          echo "- **健康检查**: http://localhost:3001/health" >> $GITHUB_STEP_SUMMARY

  # Production deployment placeholder
  deploy-production:
    needs: [release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Production deployment ready
        run: |
          echo "🎯 生产环境部署就绪"
          echo "镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "请使用以下命令部署到生产环境："
          echo "docker run -d --name dommate -p 3001:3001 -v dommate-data:/app/data ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" 