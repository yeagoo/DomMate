# ==========================================
# DomMate - Ubuntu 24.04 + Node.js 22版本
# 解决编码问题和使用最新技术栈
# ==========================================

FROM ubuntu:24.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_ENV=production
ENV SERVER_HOST=0.0.0.0
ENV SERVER_PORT=3001
ENV DATABASE_PATH=/app/data/domains.db
ENV BACKUP_DIR=/app/data/backups
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8

# 设置时区
RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo Asia/Shanghai > /etc/timezone

# 更新系统包并安装基础依赖
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    ca-certificates \
    gnupg \
    lsb-release \
    sqlite3 \
    python3 \
    python3-pip \
    build-essential \
    locales \
    locales-all \
    && rm -rf /var/lib/apt/lists/*

# 配置locale
RUN locale-gen en_US.UTF-8 zh_CN.UTF-8 && \
    update-locale LANG=en_US.UTF-8

# 安装Node.js 22 - 使用NodeSource官方仓库
RUN curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# 验证Node.js版本
RUN node --version && npm --version

# 创建应用用户和组
RUN groupadd -g 1001 dommate && \
    useradd -r -u 1001 -g dommate dommate

# 设置工作目录
WORKDIR /app

# 创建必要目录并设置权限
RUN mkdir -p /app/data /app/logs /app/backups /app/temp/exports && \
    chown -R dommate:dommate /app && \
    chmod -R 755 /app

# 复制应用文件（包括node_modules）
COPY --chown=dommate:dommate package*.json ./
COPY --chown=dommate:dommate node_modules/ ./node_modules/
COPY --chown=dommate:dommate server/ ./server/
COPY --chown=dommate:dommate dist/ ./dist/
COPY --chown=dommate:dommate public/ ./public/
COPY --chown=dommate:dommate domain-config.js ./
COPY --chown=dommate:dommate env.example ./.env.example

# 创建启动脚本
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 DomMate 容器启动中 (Ubuntu 24.04)..."
echo "📊 Node.js 版本: $(node --version)"
echo "📊 系统架构: $(uname -m)"
echo "📊 运行用户: $(whoami)"
echo "🌍 系统版本: $(cat /etc/os-release | head -1)"

# 确保数据目录存在
mkdir -p /app/data/backups

# 显示环境信息
echo "⚙️ 环境配置:"
echo "  • 数据库路径: ${DATABASE_PATH}"
echo "  • 备份目录: ${BACKUP_DIR}"
echo "  • 服务端口: ${SERVER_PORT}"
echo "  • 语言环境: ${LANG}"

# 检查前端构建产物
if [ -f "/app/dist/index.html" ]; then
    echo "✅ 前端构建产物存在"
    echo "📊 前端文件数量: $(ls /app/dist/ | wc -l)"
else
    echo "❌ 前端构建产物缺失"
fi

# 检查node_modules
if [ -d "/app/node_modules" ]; then
    echo "✅ Node.js依赖存在"
    echo "📦 依赖包数量: $(ls /app/node_modules/ | wc -l)"
else
    echo "❌ Node.js依赖缺失"
fi

# 检查关键依赖
if [ -d "/app/node_modules/fontkit" ]; then
    echo "✅ fontkit依赖存在"
else
    echo "⚠️  fontkit依赖缺失"
fi

if [ -d "/app/node_modules/pdfkit" ]; then
    echo "✅ pdfkit依赖存在"
else
    echo "⚠️  pdfkit依赖缺失"
fi

echo "🎯 启动DomMate应用..."
exec "$@"
EOF

# 设置权限
RUN chmod +x /app/entrypoint.sh && \
    chown dommate:dommate /app/entrypoint.sh && \
    chown -R dommate:dommate /app

# 切换用户
USER dommate

# 暴露端口
EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${SERVER_PORT}/health || exit 1

# 启动应用
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["node", "server/index.js"] 