# ==========================================
# DomMate - 简化版 Dockerfile 
# 使用已有的构建产物
# ==========================================

# 使用简单的alpine镜像 
FROM alpine:latest

# 安装基本依赖
RUN apk add --no-cache \
    nodejs \
    npm \
    sqlite \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# 设置环境变量
ENV NODE_ENV=production
ENV SERVER_HOST=0.0.0.0
ENV SERVER_PORT=3001
ENV DATABASE_PATH=/app/data/domains.db
ENV BACKUP_DIR=/app/data/backups

# 创建应用用户
RUN addgroup -g 1001 -S dommate && \
    adduser -S dommate -u 1001 -G dommate

# 设置工作目录
WORKDIR /app

# 创建必要目录
RUN mkdir -p /app/data /app/logs /app/backups /app/temp/exports && \
    chown -R dommate:dommate /app

# 复制应用文件（包括已构建的前端）
COPY --chown=dommate:dommate package*.json ./
COPY --chown=dommate:dommate server/ ./server/
COPY --chown=dommate:dommate dist/ ./dist/
COPY --chown=dommate:dommate public/ ./public/
COPY --chown=dommate:dommate domain-config.js ./
COPY --chown=dommate:dommate env.example ./.env.example

# 安装生产依赖
RUN npm install --production --legacy-peer-deps --no-audit --no-fund && \
    npm cache clean --force

# 创建启动脚本
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 DomMate 容器启动中..."
echo "📊 Node.js 版本: $(node --version)"
echo "📊 系统架构: $(uname -m)"

# 确保数据目录存在
mkdir -p /app/data/backups

# 显示环境信息
echo "⚙️ 环境配置:"
echo "  • 数据库路径: ${DATABASE_PATH}"
echo "  • 备份目录: ${BACKUP_DIR}"
echo "  • 服务端口: ${SERVER_PORT}"

# 检查前端构建产物
if [ -f "/app/dist/index.html" ]; then
    echo "✅ 前端构建产物存在"
    echo "📊 前端文件数量: $(ls /app/dist/ | wc -l)"
else
    echo "❌ 前端构建产物缺失"
fi

echo "🎯 启动DomMate应用..."
exec "$@"
EOF

# 设置权限
RUN chmod +x /app/entrypoint.sh && \
    chown dommate:dommate /app/entrypoint.sh && \
    chown -R dommate:dommate /app

# 切换用户
USER dommate

# 暴露端口
EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${SERVER_PORT}/health || exit 1

# 启动应用
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["node", "server/index.js"] 