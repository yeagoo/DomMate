# 🐳 DomMate CI/CD Dockerfile - Ubuntu 24.04 + Node.js 22
# 专为GitHub Actions优化，在容器内部执行完整构建流程

FROM ubuntu:24.04

# 设置环境变量
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
ENV NODE_ENV=production
ENV TZ=Asia/Shanghai

# 设置时区
RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo Asia/Shanghai > /etc/timezone

# 安装系统依赖和Node.js
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update --fix-missing || apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        wget \
        ca-certificates \
        gnupg \
        lsb-release \
        sqlite3 \
        build-essential \
        python3 \
        locales \
        locales-all \
        && rm -rf /var/lib/apt/lists/*

# 生成locale
RUN locale-gen en_US.UTF-8 zh_CN.UTF-8 && \
    update-locale LANG=en_US.UTF-8

# 安装Node.js 22.17.1 (架构自适应)
RUN ARCH="$(dpkg --print-architecture)" && \
    case "$ARCH" in \
        amd64) NODE_ARCH="x64" ;; \
        arm64) NODE_ARCH="arm64" ;; \
        *) echo "Unsupported architecture: $ARCH" && exit 1 ;; \
    esac && \
    NODE_VERSION="22.17.1" && \
    curl -fsSLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$NODE_ARCH.tar.xz" && \
    tar -xJf "node-v$NODE_VERSION-linux-$NODE_ARCH.tar.xz" -C /usr/local --strip-components=1 && \
    rm "node-v$NODE_VERSION-linux-$NODE_ARCH.tar.xz" && \
    ln -s /usr/local/bin/node /usr/bin/node && \
    ln -s /usr/local/bin/npm /usr/bin/npm

# 验证Node.js和npm安装
RUN node --version && npm --version

# 创建用户
RUN groupadd -g 1001 dommate && \
    useradd -r -u 1001 -g dommate dommate

# 设置工作目录
WORKDIR /app

# 创建应用目录
RUN mkdir -p /app/data /app/logs /app/backups /app/temp/exports && \
    chown -R dommate:dommate /app && \
    chmod -R 755 /app

# 复制package文件
COPY --chown=dommate:dommate package*.json ./

# ============================================
# 构建阶段：在容器内部执行npm install和build
# ============================================

# 设置npm配置（优化下载速度和稳定性）
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-factor 10 && \
    npm config set fetch-retry-mintimeout 10000 && \
    npm config set fetch-retry-maxtimeout 60000

# 清理npm缓存
RUN npm cache clean --force

# 安装依赖（使用CI/CD优化的安装策略）
RUN echo "🔧 Installing dependencies for CI/CD..." && \
    npm ci --only=production --no-audit --no-fund --legacy-peer-deps || \
    (echo "npm ci failed, trying npm install..." && npm install --production --no-audit --no-fund --legacy-peer-deps)

# 复制源代码
COPY --chown=dommate:dommate . .

# 安装开发依赖用于构建
RUN echo "🔧 Installing dev dependencies for build..." && \
    npm install --legacy-peer-deps --no-audit --no-fund

# 执行前端构建（使用强化的构建策略）
RUN echo "🏗️ Building frontend..." && \
    echo "System info: $(uname -a)" && \
    echo "Node.js: $(node --version)" && \
    echo "npm: $(npm --version)" && \
    echo "Architecture: $(dpkg --print-architecture)" && \
    # 第一次尝试：标准构建
    (npm run build && echo "✅ Standard build succeeded") || \
    # 第二次尝试：清理rollup并重试
    (echo "❌ Standard build failed, trying rollup fix..." && \
     rm -rf node_modules/@rollup/ node_modules/rollup && \
     npm install @rollup/rollup-linux-x64-gnu --optional --legacy-peer-deps && \
     npm run build && echo "✅ Rollup fix build succeeded") || \
    # 第三次尝试：完全重新安装
    (echo "❌ Rollup fix failed, trying full reinstall..." && \
     rm -rf node_modules package-lock.json && \
     npm install --legacy-peer-deps --no-audit && \
     npm install @rollup/rollup-linux-x64-gnu --save-optional --legacy-peer-deps && \
     npm run build && echo "✅ Full reinstall build succeeded") || \
    # 最后尝试：报告失败
    (echo "💥 All build attempts failed" && exit 1)

# 验证构建产物
RUN echo "📦 Verifying build artifacts..." && \
    ls -la dist/ && \
    echo "Build verification complete"

# 清理开发依赖和构建缓存
RUN echo "🧹 Cleaning up build artifacts..." && \
    npm prune --production && \
    npm cache clean --force && \
    rm -rf /tmp/* /var/tmp/* ~/.npm ~/.cache

# 切换到非root用户
USER dommate

# 设置启动目录权限
RUN ls -la /app && \
    echo "Final directory structure ready"

# 暴露端口
EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# 创建启动脚本
RUN echo '#!/bin/bash' > /app/entrypoint.sh && \
    echo 'set -e' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'echo "🚀 DomMate CI/CD Container Starting..."' >> /app/entrypoint.sh && \
    echo 'echo "=================================="' >> /app/entrypoint.sh && \
    echo 'echo "📊 Container Info:"' >> /app/entrypoint.sh && \
    echo 'echo "- OS: $(uname -s)"' >> /app/entrypoint.sh && \
    echo 'echo "- Architecture: $(uname -m)"' >> /app/entrypoint.sh && \
    echo 'echo "- Node.js: $(node --version)"' >> /app/entrypoint.sh && \
    echo 'echo "- Timezone: $(date +%Z)"' >> /app/entrypoint.sh && \
    echo 'echo "- User: $(whoami)"' >> /app/entrypoint.sh && \
    echo 'echo "=================================="' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# 确保数据目录存在' >> /app/entrypoint.sh && \
    echo 'mkdir -p /app/data /app/logs /app/backups /app/temp/exports' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# 启动应用' >> /app/entrypoint.sh && \
    echo 'echo "🎯 Starting DomMate server..."' >> /app/entrypoint.sh && \
    echo 'exec node server/index.js' >> /app/entrypoint.sh

# 设置启动脚本权限
USER root
RUN chmod +x /app/entrypoint.sh && chown dommate:dommate /app/entrypoint.sh
USER dommate

# 设置启动命令
ENTRYPOINT ["/app/entrypoint.sh"] 